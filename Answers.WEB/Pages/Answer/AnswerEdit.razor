@page "/answers/edit/{AnswerId:guid}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

<h3>Editar Respuesta</h3>

@if (answer is null)
{
    <div class="spinner"/>
}
else
{
    <AnswerForm @ref="answerForm" Answer="answer" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
    private Answer? answer;
    private AnswerForm? answerForm;

    [Parameter]
    public Guid AnswerId { get; set; }

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<Answer>($"/api/answers/{AnswerId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/answers");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        answer = responseHttp.Response;
    }

    private async Task EditAsync()
    {
        var responseHttp = await repository.Put("/api/answers", answer);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();
    }

    private void Return()
    {
        answerForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/questions/details/{answer!.QuestionId}");
    }
}
