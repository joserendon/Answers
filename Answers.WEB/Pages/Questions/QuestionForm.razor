@inject SweetAlertService sweetAlertService
@using Answers.WEB.Pages.Answer
@using Answers.WEB.Pages.Questionnaires;
<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col">
            <div class="mb-3">
                <label>Pregunta:</label>
                <div>
                    <InputTextArea class="form-control" @bind-Value="@Question.Name" rows="4" />
                    <ValidationMessage For="@(() => Question.Name)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Tipo:</label>
                <div>
                    <select class="form-select" @onchange="QuestionTypeChangedAsync" >
                        <option value="0">-- Seleccione un tipo--</option>
                        @foreach (QuestionType type in Enum.GetValues(typeof(QuestionType)))
                        {
                            <option value="@type" selected="@(type == Question.Type)">@Enum.GetName(typeof(QuestionType),type)</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => Question.Type)" />
                </div>
            </div>
        </div>
        @if (Question.Type is QuestionType.Choice or QuestionType.Multiple)
        {
            <div class="col">
                <div class="mb-3">
                    <AnswerFormArray Question="Question"></AnswerFormArray>
                </div>
            </div>
        } 
    </div>

    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {
    private EditContext editContext = null!;

    [Parameter]
    [EditorRequired]
    public Question Question { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(Question);
    }

    private async Task QuestionTypeChangedAsync(ChangeEventArgs e)
    {
        Enum.TryParse(e.Value?.ToString(), out QuestionType selectedType);

        Question.Type = selectedType;
        if (selectedType.Equals(QuestionType.Open))
        {
            Question.Answers = null;
        }
        await Task.CompletedTask;
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMofied = editContext.IsModified();
        if (!formWasMofied || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
