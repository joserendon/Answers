@page "/pollList"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin, User")]

@if (Userpoll is null)
{
    <div class="spinner" />
}
else
{
    <GenericList MyList="Userpoll">
        <Body>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-dollar" /> Encuestas respondidas
                    </span>
                </div>
                <div class="card-body">
                    <Pagination CurrentPage="currentPage"
                            TotalPages="totalPages"
                            SelectedPage="SelectedPageAsync" />

                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <AuthorizeView Roles="Admin">
                                    <Authorized>
                                        <th>Usuario</th>
                                    </Authorized>
                                </AuthorizeView>
                                <th>Nombre encuesta</th>
                                <th>Descripcion</th>
                                <th>Fecha inicio</th>
                                <th>Fecha fin</th>
                                <th>Activa</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var userpoll in Userpoll)
                            {
                                <tr>
                                    <AuthorizeView Roles="Admin">
                                        <Authorized>
                                            <td>
                                                @userpoll.User!.FullName
                                            </td>
                                        </Authorized>
                                    </AuthorizeView>
                                    <td>
                                        @schedule.Name
                                    </td>
                                    <td>
                                        @schedule.Description
                                    </td>
                                    <td>
                                    <td>
                                        @schedule.StartDate
                                    </td>
                                    </td>
                                    <td>
                                        @schedule.EndDate
                                    </td>
                                    <td>
                                       @schedule.IsActive
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </Body>
    </GenericList>
}

@code {
    private int currentPage = 1;
    private int totalPages;

    public List<UserPoll>? Userpoll { get; set; }

    public Schedule? schedule { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = $"api/schedule?page={page}";
        string url2 = $"api/schedule/totalPages";

        try
        {
            var responseHppt = await repository.Get<List<Schedule>>(url1);
            var responseHppt2 = await repository.Get<int>(url2);
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }
}
