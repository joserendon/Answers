@page "/schedules"
@using Answers.WEB.Helpers;
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@inject IRepository repository 
@inject IJSRuntime JS
@attribute [Authorize(Roles = "Admin")]

@if (Schedules is null)
{
    <div class="spinner" />
}
else
{
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-globe"></i> Programaciones
                <a class="btn btn-sm btn-primary float-end" @onclick="()=> ShowModal()"><i class="oi oi-plus"></i> Adicionar Programación</a>
            </span>
        </div>
        <div class="card-body">
            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                <div>
                    <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar programaciones" @bind-value="Filter" />
                </div>
                <div class="mx-1">
                    <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                </div>
            </div>

            <Pagination CurrentPage="currentPage"
                    TotalPages="totalPages"
                    SelectedPage="SelectedPageAsync" />

            <GenericList MyList="Schedules">
                <Body>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th style="width:320px">Nombre</th>
                                <th style="width:120px">Fecha Inicio</th>
                                <th style="width:120px">Fecha Fin</th>
                                <th style="width:220px">Cuestionario</th>
                                <th style="width:120px">Activa</th>
                                <th style="width:260px">Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var schedules in Schedules!)
                            {
                                <tr>
                                    <td>@schedules.Name</td>
                                    <td>@schedules.StartDate!.Value.Date.ToShortDateString()</td>
                                    <td>@schedules.EndDate!.Value.Date.ToShortDateString()</td>
                                    <td>@schedules.Questionnaire?.Title</td>
                                    <td><InputCheckbox @bind-Value="@schedules.IsActive" disabled="true" /></td>
                                    <td>
                                        <a href="/schedules/details/@schedules.QuestionnaireId" class="btn btn-info btn-sm"><i class="oi oi-list" /> Detalles</a>
                                        <a @onclick=@(() => ShowModal(id: schedules.Id, isEdit: true)) class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>
                                        <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(schedules.Id))><i class="oi oi-trash" /> Borrar</button>
                                        <button class="btn btn-dark btn-sm" @onclick=@(() => DownloadReportFile(schedules.Id))><i class="oi oi-file" /> Descargar</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </Body>
            </GenericList>
        </div>
    </div>
}

@code {
    private int currentPage = 1;
    private int totalPages;

    public List<Schedule>? Schedules { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task ShowModal(Guid? id = null, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<ScheduleEdit>(string.Empty, new ModalParameters().Add("Id", id!));
        }
        else
        {
            modalReference = Modal.Show<ScheduleCreate>();
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/schedules?page={page}";
            url2 = $"api/schedules/totalPages";
        }
        else
        {
            url1 = $"api/schedules?page={page}&filter={Filter}";
            url2 = $"api/schedules/totalPages?filter={Filter}";
        }

        try
        {
            var responseHppt = await repository.Get<List<Schedule>>(url1);
            var responseHppt2 = await repository.Get<int>(url2);
            Schedules = responseHppt.Response!;
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task DeleteAsync(Guid id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/schedules/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }
    private async Task DownloadReportFile(Guid Id)
    {
        var fileStream = await repository.GetStream($"api/polls/GetPollReportAsync?ScheduleId={Id}"); 
        var fileName = "Reporte.xlsx";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}

