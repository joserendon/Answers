@inject SweetAlertService sweetAlertService
@inject IRepository repository

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-6">
            <div class="mb-3">
                <label>Programacion:</label>
                <div>
                    <InputTextArea class="form-control" @bind-Value="@Schedule.Name" rows="2" />
                    <ValidationMessage For="@(() => Schedule.Name)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Description:</label>
                <div>
                    <InputTextArea class="form-control" @bind-Value="@Schedule.Description" rows="3" />
                    <ValidationMessage For="@(() => Schedule.Description)" />
                </div>
            </div>
            <div class="mb-3">
                <div class="form-group">
                    <label for="fecha">Fecha inicio:</label>
                    <InputDate class="form-control" @bind-Value="@Schedule.StartDate" />
                    <ValidationMessage For="@(() => Schedule.StartDate)" />
                </div>
            </div>
            <div class="mb-3">
                <div class="form-group">
                    <label for="fecha">Fecha fin:</label>
                    <InputDate class="form-control" @bind-Value="@Schedule.EndDate" />
                    <ValidationMessage For="@(() => Schedule.EndDate)" />
                </div>
            </div>
        </div>
        <div class="col-6">
            <div class="mb-3">
                <label>Cuestionario:</label>
                <div>
                    <InputSelect id="questionnaireId" @bind-Value="Schedule.QuestionnaireId" class="form-control">
                        <option value="0">-- Seleccione un cuestionario --</option>
                        @if (questionnaires is not null)
                        {
                            @foreach (var questionnaire in questionnaires)
                            {
                                <option value="@questionnaire.Id">@questionnaire.Title</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Schedule.QuestionnaireId)" />

                </div>
            </div>
            <div class="mb-3">
                <div class="form-check">
                    <br>
                    <InputCheckbox @bind-Value="Schedule.IsActive" class="form-check-input" id="chkActive" /><label class="form-check-label" for="chkActive">Activo</label>
                </div>
            </div>
            <div class="mb-3">
                <InputImg Label="Imagen" ImageSelected="ImageSelected" ImageURL="@imageUrl" />
            </div>
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {
    private EditContext editContext = null!;
    private string? imageUrl;
    private List<Questionnaire>? questionnaires;

    [Parameter]
    [EditorRequired]
    public Schedule Schedule { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    public bool ScheduleIsActive { get; set; }

    protected async override Task OnInitializedAsync()
    {
        editContext = new(Schedule);
        await LoadQuestionnairesAsync();

        if (!string.IsNullOrEmpty(Schedule!.URLImage))
        {
            imageUrl = Schedule!.URLImage;
            Schedule.URLImage = null;
        }
    }

    private async Task LoadQuestionnairesAsync()
    {
        var responseHttp = await repository.Get<List<Questionnaire>>("/api/questionnaires/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        questionnaires = responseHttp.Response;
    }

    private async Task ScheduleIsActiveChangedAsync(ChangeEventArgs e)
    {
        Schedule.IsActive = true;
        await Task.CompletedTask;
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMofied = editContext.IsModified();
        if (!formWasMofied || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
    private void ImageSelected(string imagenBase64)
    {
        Schedule.URLImage = imagenBase64;
        imageUrl = null;
    }
}
