@page "/questionnaires/edit/{Id:guid}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

<h3>Editar Cuestionario</h3>

@if (questionnaire is null)
{
    <div class="spinner" />
}
else
{
    <QuestionnaireForm @ref="questionnaireForm" Questionnaire="questionnaire" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
    private Questionnaire? questionnaire;
    private QuestionnaireForm? questionnaireForm;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<Questionnaire>($"/api/questionnaires/{Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/questionnaires");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        questionnaire = responseHttp.Response;
    }

    private async Task EditAsync()
    {
        var responseHttp = await repository.Put("/api/questionnaires", questionnaire);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();
    }

    private void Return()
    {
        questionnaireForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/questionnaires");
    }
}
