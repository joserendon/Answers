@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
<div class="card">
    <div class="card-header">
        <span>
            <i class="oi oi-globe"></i> Respuestas (@Question.Questionnaires?.Count)
            <button type="button" class="btn btn-sm btn-primary float-end" @onclick="()=> AddQuestionnaire()"><i class="oi oi-plus"></i> Adicionar</button>
        </span>
    </div>
    <div class="card-body overflow-auto" style="max-height:30vh">
        @if (Question.Questionnaires is not null)
        {
            <EditForm EditContext="editContext">
                <DataAnnotationsValidator />
                <ValidationSummary></ValidationSummary>
                @foreach (var questionnaire in Question.Questionnaires)
                {
                    <div class="mb-3">
                        <label>@questionnaire.Name</label>
                        <label>Respuesta:</label>
                        <div>
                            <InputTextArea class="form-control" @bind-Value="questionnaire.Name" rows="2" />
                            <ValidationMessage For="@(() => questionnaire.Name)" />
                        </div>
                    </div>
                }
            </EditForm>
        }
    </div>
</div>

@code {
    private EditContext editContext = null!;

    [Parameter]
    [EditorRequired]
    public Question Question { get; set; } = null!;

    public bool FormPostedSuccessfully { get; set; }

    protected override void OnInitialized()
    {
        InitQuestionnairesValid();

        editContext = new(Question.Questionnaires!);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMofied = editContext.IsModified();
        if (!formWasMofied || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonara la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
    private void InitQuestionnairesValid()
    {

        if (Question.Questionnaires is null)
        {
            Question.Questionnaires = new List<Questionnaire>();
            AddQuestionnaire();
        }
    }
    private void AddQuestionnaire()
    {
        Question.Questionnaires!.Add(new Questionnaire());
    }
}
